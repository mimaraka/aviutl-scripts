--track0:開始ﾌﾚｰﾑ,0,1000,0,1
--track1:振幅,0,10,0.1,0.01
--track2:振動数,0,50,3,0.01
--track3:減衰,0,20,7,0.01
--dialog:振動数調整,local txt="100を基準とした比";∟X,local x=100;∟Y,local y=100;∟Z,local z=100;∟拡大率,local zoom=100;∟透明度,local alp=100;∟回転X,local rx=100;∟回転Y,local ry=100;∟回転Z,local rz=100;開始時間検出/chk,local auto=1;

local start_t = obj.track0 / obj.framerate
local amp = obj.track1
local freq = obj.track2
local dec = obj.track3
local gv = obj.getvalue

local function elastic_bounce(type, a)
	local v
	-- 自動検出が有効な場合
	if (auto == 1) then
		local tmp
		-- 直近で値が静止した時間を取得
		for f = 0, obj.frame do
			if (gv(type, f / obj.framerate) ~= gv(type, f / obj.framerate - 0.001) and gv(type, f / obj.framerate) == gv(type, f / obj.framerate + 0.001) and gv(type, f / obj.framerate) == gv(type, f / obj.framerate + 0.1)) then
				tmp = f / obj.framerate
			end
		end
		if tmp then
			start_t = tmp
		else
			v = 0
		end
	end
	if v == nil then
		v = (gv(type, start_t) - gv(type, start_t - 0.001)) * 1000
	end
	local result = v * amp * math.sin(0.01 * a * freq * (obj.time - start_t) * 2 * math.pi) / math.exp(dec * (obj.time - start_t))
	if (obj.time  >= start_t) then
		return result
	else
		return 0
	end
end

obj.ox = elastic_bounce("x", x)
obj.oy = elastic_bounce("y", y)
obj.oz = elastic_bounce("z", z)
obj.zoom = 1 + 0.01 * elastic_bounce("zoom", zoom)
obj.alpha = gv"alpha" + elastic_bounce("alpha", alp)
obj.rx = gv"rx" + elastic_bounce("rx", rx)
obj.ry = gv"ry" + elastic_bounce("ry", ry)
obj.rz = gv"rz" + elastic_bounce("rz", rz)